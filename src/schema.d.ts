/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/events/{name}": {
    /**
     * Returns an event
     * @description Returns the event with the given name
     */
    get: operations["get-event"];
    /**
     * Emit an event
     * @description Emits the specified event of the user and returns whether the event should be rate, quota limited or allowed. Rate limits are checked first & Quota limits will be checked only if user passes rate limit.
     */
    post: operations["emit-event"];
  };
  "/events": {
    /**
     * List events
     * @description Lists all emitted events of the workspace
     */
    get: operations["list-events"];
  };
  "/events/usage/top": {
    /**
     * List top usage
     * @description Returns the users with the most usage of the event.
     */
    get: operations["list-top-usage"];
  };
  "/events/usage/{interval}": {
    /**
     * List event usage
     * @description Lists event usage with an interval
     */
    get: operations["list-event-usage"];
  };
  "/events/usage": {
    /**
     * Get event usage
     * @description Returns event usage with hourly granularity.
     */
    get: operations["get-event-usage"];
  };
  "/auth/key/{workspaceID}": {
    /** Creates an API Key */
    put: {
      parameters: {
        path: {
          workspaceID: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": {
              key: string;
            };
          };
        };
      };
    };
  };
  "/auth": {
    /** Returns the auth url */
    get: {
      responses: {
        200: {
          content: {
            "application/json": {
              url: string;
            };
          };
        };
      };
    };
  };
  "/auth/callback": {
    /** Returns the auth url */
    get: {
      parameters: {
        query: {
          code: string;
        };
      };
      responses: {
        /** @description After a successful Authentication, redirects to the app with cookies set. */
        302: {
          content: never;
        };
      };
    };
  };
  "/auth/me": {
    /** Returns the current User */
    get: {
      responses: {
        200: {
          content: {
            "application/json": {
              user: {
                id: string;
                email: string;
                emailVerified: boolean;
                firstName?: string;
                lastName?: string;
              };
              workspaces: {
                id: string;
                name: string;
              }[];
              currentWorkspace: string;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /**
               * @description The HTTP status code
               * @example 200
               */
              status: number;
              /** @description A human readable explanation of what went wrong */
              message: string;
            };
          };
        };
        /** @description Authorization information is missing or invalid */
        401: {
          content: {
            "application/json": {
              /**
               * @description The HTTP status code
               * @example 200
               */
              status: number;
              /** @description A human readable explanation of what went wrong */
              message: string;
            };
          };
        };
      };
    };
  };
  "/auth/refresh": {
    /** Refreshes the current access token */
    get: {
      responses: {
        200: {
          content: never;
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /**
               * @description The HTTP status code
               * @example 200
               */
              status: number;
              /** @description A human readable explanation of what went wrong */
              message: string;
            };
          };
        };
        /** @description Authorization information is missing or invalid */
        401: {
          content: {
            "application/json": {
              /**
               * @description The HTTP status code
               * @example 200
               */
              status: number;
              /** @description A human readable explanation of what went wrong */
              message: string;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Event: {
      name: string;
      /** Format: date-time */
      lastEmitted: string;
    };
  };
  responses: never;
  parameters: {};
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Returns an event
   * @description Returns the event with the given name
   */
  "get-event": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
      /** @description Authorization information is missing or invalid */
      401: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
    };
  };
  /**
   * Emit an event
   * @description Emits the specified event of the user and returns whether the event should be rate, quota limited or allowed. Rate limits are checked first & Quota limits will be checked only if user passes rate limit.
   */
  "emit-event": {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Identifier of your user who emitted the event, e.g their userId, email, ip or anything else.
           * @example user_123
           */
          identifier: string;
          /**
           * @description How expensive the request is.
           * @default 1
           * @example 2
           */
          cost?: number;
          rate?: {
            /**
             * @description Max events possible during a burst.
             * @default 1
             */
            burst: number;
            /**
             * @description The amount of allowed events per period.
             * @default 10
             */
            rate: number;
            /**
             * @description The period in milliseconds over which the rate applies.
             * @default 1000
             */
            period: number;
          };
          quota?: {
            /** @description Max amount of event allowed per interval. */
            max: number;
            /**
             * @description Interval for which the maximum applies.
             * @enum {string}
             */
            interval: "monthly" | "daily";
          };
        };
      };
    };
    responses: {
      /** @description Usage is returned only if the corresponding limit is defined */
      200: {
        content: {
          "application/json": {
            /**
             * @description Whether the users request should be limited
             * @example true
             */
            isLimited: boolean;
            rate?: {
              /**
               * @description The total limit of the key. (Equivalent to X-RateLimit-Limit)
               * @example 10
               */
              limit: number;
              /**
               * @description The remaining limit of the key. (Equivalent to X-RateLimit-Remaining)
               * @example 4
               */
              remaining: number;
              /** @description Number of milliseconds to wait until retry if the event is limited (Equivalent to Retry-After) */
              retryAfter?: number;
              /** @description Number of seconds until the limit is fully restored. (Equivalent to X-RateLimit-Reset) */
              resetAfter: number;
            };
            quota?: {
              /** @description Max amount of event allowed per interval. */
              max: number;
              /** @description The remaining events for the user in the current interval */
              remaining: number;
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
      /** @description Authorization information is missing or invalid */
      401: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
    };
  };
  /**
   * List events
   * @description Lists all emitted events of the workspace
   */
  "list-events": {
    responses: {
      /** @description All emitted events */
      200: {
        content: {
          "application/json": components["schemas"]["Event"][];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
      /** @description Authorization information is missing or invalid */
      401: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
    };
  };
  /**
   * List top usage
   * @description Returns the users with the most usage of the event.
   */
  "list-top-usage": {
    parameters: {
      query: {
        start: string;
        end: string;
        eventName: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Format: date-time */
            time: string;
            identifier: string;
            countQuotaLimited: number;
            countRateLimited: number;
            countAllowed: number;
            totalCount: number;
            totalCost: number;
            usage: number;
          }[];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
      /** @description Authorization information is missing or invalid */
      401: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
    };
  };
  /**
   * List event usage
   * @description Lists event usage with an interval
   */
  "list-event-usage": {
    parameters: {
      query: {
        start: string;
        end: string;
        eventName?: string;
        identifier?: string;
      };
      path: {
        interval: "hourly" | "daily" | "monthly";
      };
    };
    responses: {
      /** @description Aggregated event usage over an interval */
      200: {
        content: {
          "application/json": {
            /** Format: date-time */
            time: string;
            countQuotaLimited: number;
            countRateLimited: number;
            countAllowed: number;
            totalCount: number;
            totalCost: number;
            usage: number;
          }[];
        };
      };
    };
  };
  /**
   * Get event usage
   * @description Returns event usage with hourly granularity.
   */
  "get-event-usage": {
    parameters: {
      query: {
        start: string;
        end: string;
        eventNames?: string | string[];
        identifier?: string;
      };
    };
    responses: {
      /** @description Aggregated event usage over a range with hourly granularity. */
      200: {
        content: {
          "application/json": {
            /** @description defined if eventName is specified */
            event_name?: string;
            countQuotaLimited: number;
            countRateLimited: number;
            countAllowed: number;
            totalCount: number;
            totalCost: number;
            usage: number;
          }[];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
      /** @description Authorization information is missing or invalid */
      401: {
        content: {
          "application/json": {
            /**
             * @description The HTTP status code
             * @example 200
             */
            status: number;
            /** @description A human readable explanation of what went wrong */
            message: string;
          };
        };
      };
    };
  };
}
